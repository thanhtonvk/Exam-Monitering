1, Cài đặt Django và các thư viện cần thiết 

# Tạo project Django mới
django-admin startproject exam_monitoring

# Di chuyển vào thư mục dự án
cd exam_monitoring

# Tạo ứng dụng cho bài thi trắc nghiệm
python manage.py startapp quiz

# Cài đặt các thư viện cần thiết
pip install djangorestframework opencv-python django-cors-headers celery redis

2. Cấu hình cơ bản cho django 


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'quiz',
    'corsheaders',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True

# Celery configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'






3. Tạo model cho bài thi trắc nghiệm 
quiz/models.py 
from django.db import models
from django.contrib.auth.models import User

class Question(models.Model):
    question_text = models.CharField(max_length=255)
    correct_answer = models.CharField(max_length=100)

    def __str__(self):
        return self.question_text

class Exam(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    questions = models.ManyToManyField(Question)
    date_taken = models.DateTimeField(auto_now_add=True)
    is_cheating_detected = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.user.username} - {self.date_taken}"




4. Tạo view và API cho chắc nghiệm 
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Question, Exam
from django.contrib.auth.models import User

@api_view(['GET'])
def get_questions(request):
    questions = Question.objects.all()
    data = [{"id": q.id, "question_text": q.question_text} for q in questions]
    return Response(data)

@api_view(['POST'])
def submit_exam(request):
    user = User.objects.get(id=request.data['user_id'])
    exam = Exam.objects.create(user=user)
    for question_id in request.data['questions']:
        question = Question.objects.get(id=question_id)
        exam.questions.add(question)
    exam.save()

    # Xử lý phát hiện gian lận ở đây (sẽ thêm sau)
    
    return Response({"message": "Exam submitted successfully"})





5. Xử lý camera stream và phát hiện gian lận 
Sử dụng opencv để nhận video stream từ camera

import cv2

def detect_cheating(video_path):
    cap = cv2.VideoCapture(video_path)
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        
        # Xử lý phát hiện khuôn mặt và hành vi gian lận
        # Sử dụng mô hình AI để phân tích frame

        # Nếu phát hiện gian lận, bạn có thể return True
    cap.release()
    return False





6.Tạo celery task để xử lý nền 
quiz/task
from celery import shared_task
from .models import Exam
from .utils import detect_cheating

@shared_task
def analyze_video_for_cheating(exam_id, video_path):
    exam = Exam.objects.get(id=exam_id)
    cheating_detected = detect_cheating(video_path)
    if cheating_detected:
        exam.is_cheating_detected = True
        exam.save()



quiz/utils

import cv2

def detect_cheating(video_path):
    cap = cv2.VideoCapture(video_path)
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)

        if len(faces) == 0:
            print("No face detected. Possible cheating.")
            return True  # Gian lận nếu không thấy khuôn mặt

    cap.release()
    return False



7. tích hợp camera stream với frontend 
from django.http import StreamingHttpResponse
import cv2

def gen(camera):
    while True:
        frame = camera.get_frame()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')

class VideoCamera(object):
    def __init__(self):
        self.video = cv2.VideoCapture(0)

    def __del__(self):
        self.video.release()

    def get_frame(self):
        ret, frame = self.video.read()
        ret, jpeg = cv2.imencode('.jpg', frame)
        return jpeg.tobytes()

def video_feed(request):
    return StreamingHttpResponse(gen(VideoCamera()),
                                 content_type='multipart/x-mixed-replace; boundary=frame')


8. Chạy celery worker
celery -A exam_monitoring worker --loglevel=info


9. Chạy server Django
python manage.py runserver


10. Frontend cho camera giám sát 
<video id="videoElement" autoplay></video>

<script>
    navigator.mediaDevices.getUserMedia({ video: true })
        .then(function(stream) {
            var video = document.getElementById('videoElement');
            video.srcObject = stream;
        })
        .catch(function(err) {
            console.log("Something went wrong!", err);
        });
</script>






