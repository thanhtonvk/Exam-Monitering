https://tracnghiemhoahocconcuong.online/admin/login

tài khoản:
trangiangzxc@gmail.com
mật khẩu:
123123123

Bài thi (câu hỏi (đáp án)), tên phòng thi, thời gian bắt đầu, thời gian kết thúc 
Thời gian (phút)
Mã phòng thi,
Người tạo

Django quản lý phần thi trắc nghiệm và giao tiếp giữa server và front-end.
OpenCV
Tích hợp với OpenCV để xử lý video trực tiếp từ camera của thí sinh.
Kết hợp với các mô hình AI để phân tích xem người thi có rời mắt khỏi màn hình, 
nhiều người trong khung hình, hoặc các dấu hiệu khác của gian lận.

Deep Learning/AI: Bạn có thể sử dụng các mô hình deep learning để phát hiện hành vi gian lận.

Mô hình phát hiện khuôn mặt: Xác định xem thí sinh có luôn đối diện với màn hình hay không.
Phát hiện hành vi bất thường: Sử dụng mô hình deep learning (ResNet, MobileNet, etc.) 
để phát hiện hành vi không bình thường như nhiều người trong phòng thi.
TensorFlow hoặc PyTorch: Framework mạnh mẽ cho việc xây dựng và huấn luyện mô hình AI.

Streaming Data: Sử dụng WebRTC hoặc RTSP để stream video từ camera của thí sinh về server.

RTSP (Real Time Streaming Protocol) có thể được sử dụng để truyền tải video trực tiếp tới server.
WebRTC hỗ trợ việc truyền video trực tiếp qua các trình duyệt mà không cần cài đặt plugin.


Inference: Dùng mô hình AI đã huấn luyện để phân tích dữ liệu hình ảnh hoặc video và gửi cảnh báo khi phát hiện gian lận.

Các công cụ như OpenCV hoặc TensorFlow Serving có thể được tích hợp để làm inference (suy luận) theo thời gian thực.

Notification/Alert System: Nếu hệ thống phát hiện gian lận, nó sẽ gửi cảnh báo đến giảng viên hoặc 
quản trị viên thông qua email hoặc hệ thống thông báo trực tiếp trên trang web.


Cấu trúc dự án có thể gồm:

Frontend: Giao diện người dùng để hiển thị camera stream và bài thi trắc nghiệm.
Backend: API với Flask/Django để xử lý logic của bài thi và giám sát.
AI Service: Xử lý video stream để phát hiện gian lận.



1. Backend với Django
Django có thể xử lý phần thi trắc nghiệm, lưu trữ thông tin câu hỏi, thí sinh và kết quả thi trong cơ sở dữ liệu.
Django Rest Framework (DRF) có thể được dùng để xây dựng các API cho việc truyền tải dữ liệu, 
bao gồm dữ liệu video từ camera hoặc các kết quả phân tích gian lận.

2. Quản lý luồng camera stream
Django có thể tích hợp với WebRTC hoặc RTSP để thu nhận và stream dữ liệu camera từ máy của thí sinh về server.
Django có thể quản lý và lưu trữ các luồng video này trên server hoặc truyền trực tiếp qua WebSocket để giảng viên theo dõi.

3. Xử lý AI và phân tích dữ liệu camera
Bạn có thể dùng Celery với Django để thực hiện các tác vụ xử lý nền (background tasks) 
như phân tích dữ liệu video theo thời gian thực mà không làm chậm hệ thống.
Các mô hình machine learning hoặc deep learning (ví dụ ResNet hoặc MobileNet) được xây dựng bằng TensorFlow 
hoặc PyTorch có thể được triển khai cùng với Django để phát hiện gian lận như người rời khỏi màn hình, có nhiều khuôn mặt trong khung hình,...

4. Tích hợp OpenCV với Django
OpenCV có thể được tích hợp để xử lý và phân tích stream video. 
Khi có camera stream từ thí sinh, Django sẽ sử dụng OpenCV để phân tích các frame và phát hiện các hành vi bất thường.
Kết hợp Django với TensorFlow Serving để thực hiện suy luận (inference) AI thời gian thực trên dữ liệu camera stream.

5. Hệ thống thông báo
Django có thể phát hiện gian lận và gửi cảnh báo theo thời gian thực cho 
giảng viên thông qua email, notification hoặc trên dashboard của giảng viên.

6. Giao diện quản lý cho giảng viên
Django Admin có thể được tùy chỉnh để giảng viên có thể theo dõi các luồng video trực tiếp 
và nhận cảnh báo ngay khi phát hiện hành vi gian lận.
Xây dựng một dashboard cho phép giảng viên quản lý các kỳ thi, 
theo dõi tiến độ của thí sinh và xem video camera theo thời gian thực.

7. Lưu trữ và phân tích dữ liệu
Django có thể lưu trữ dữ liệu camera và kết quả phân tích trong cơ sở dữ liệu 
(ví dụ như PostgreSQL) để giảng viên xem lại sau khi kỳ thi kết thúc.


Chạy Celery 
celery -A exam_monitoring worker --loglevel=info 


Chạy server